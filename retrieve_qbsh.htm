<html>
<head>
	<title>線上教材：音樂資訊分析</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<link rel=stylesheet type="text/css" href="myCss.css">
	<base target="_blank">
	<script type="text/javascript" src="shCore.js"></script>
	<script type="text/javascript" src="shBrushPython.js"></script>
	<link href="shCore.css" rel="stylesheet" type="text/css" />
	<link href="shThemeDefault.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript">
		SyntaxHighlighter.all();
	</script>
</head>

<body bgcolor="#ccccff">

<blockquote>

<p>
哼唱選歌的目標是，你哼或唱某一首歌的某一小段（這個小段的長度，通常在八到十秒左右），然後系統會找出你剛剛唱的是哪一首歌。
</p>

<p>一般而言，進行一次查詢時，系統會回覆給你一些（例如十到二十首）候選歌曲，以便告訴你說你唱的可能是這些歌；而如果你在查詢前其實已經知道自己唱的是什麼歌，而系統回覆的候選歌曲中，答案排在愈前面的話，你很可能就會認為這個系統愈厲害。因此，哼唱選歌常見的評估方式，是 top-n accuracy，以及 mean reciprocal rank (MRR)。假設我們做了 10 次查詢，而標準答案的位置分別在第 3、7、4、2、5、1、2、8、6、6 名的話，則因為 10 次裡面有 1 次是在第一名內，所以 top-1 accuracy 是 1 / 10 = 10%；10 次裡面有 3 次是在前兩名內，所以 top-2 accuracy 是 3 / 10 = 30%，依此類推；而 MRR 則是將標準答案的名次取倒數再平均，以此例而言，是 (1 / 3 + 1 / 7 + ... + 1 / 6) / 10 = 33.85%。</p>
<!-- <pre class="brush: py">
print('Hello World')
</pre> -->

</blockquote>

</body></html>
